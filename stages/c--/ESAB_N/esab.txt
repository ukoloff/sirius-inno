/* обьявление и инициализация переменных */
char OK,OK1,ch;                                  /* переменная для поддержки диалога            */
static int loop,W30;                             /* переменные поддержки цикла                  */
extern int shag;                                 // индекс массива удаления
extern int undos[500];                           // массив удаления
char OLD[64],OLP[64];                            /* переменные для ввода имен файлов и партидов */
extern float W72,W144,W145,W97,Lange,DCutt;      /* внешние переменные                          */
extern float W7,W8,W86,W87,W6,W1,W2;             /* внешние переменные                          */
extern float XW1,YW1,W4,W5,W91,W110,W120;        /* внешние переменные                          */
extern float XFrom,YFrom;
extern float NextPx,NextPy;
extern int   Sposob;
extern int pin;
extern float pinok;
extern float A0,A1,A2,A3,A4,A5;
float        W70,W111,Kom;
int          Fint,Adres,W12,nom,menu_1;
shag=0;
pinok=0;
A0=1;  // номер подпрограммы
A1=15; // дистанция врезки
A2=1; // спан для внешних контуров
A3=0; // позиция на спане
A4=1; // спан для внутренних контуров
A5=0; // позиция на спане
pin=0;
undos[shag]=1;
LOAD(); // Команды Сириуса, пишутся заглавными буквами
SEQ(1);
if (KURSEQ==-1)
{
 NEW(1);
 CUR();
 CEN();
 DRA(0);     /* сириусная команда центровки                   */
 N(9999);   /* сириусная команда прогонки последовательности */
}
else
{
 CUR();
 CEN();
 DRA(0);     /* сириусная команда центровки                   */
}
pin=0;
K();
print("                        ");
Kom=HEAP[7];
if(Kom!=0)
   OK:='N';
else
 {
   N(1);
   K();
   print("                        ");
   Kom=HEAP[7];
   if(Kom!=0)
   {
     OK:='N';
     N(-1);
   }
   else
     OK:='Y';
 }
//OK:='Y';
//print("Первый раз([Y]/N)>"); /* печатать на нижней ком строке */
//read(OK);    /* ввод символа  Y или  N или ничего ,           */
/* если ничего не ввели остается старое значение переменных   */
nastr1();
W111=1;
if (OK!='N') /* проверка введенного символа на неравенство с буквой N */
{
/* сириучная команда чистки экрана, центровки и рисования     */
 ST1();
 ST(); /*  старт подпрограммы ST из файла ST.C--              */
 CUTTER(0.0);
// CUTTER(DCutt);
 W6++;
 /*               внимание !
	  имена подпрограмм при вызове должны совпадать с именами
	  файлов их содержащих
									внимание !
		имена подпрограмм не должны совпадать с именами функций сириусных
		                     команд    */
// L6445: print("-Выберите начальную точку рядом с точкой врезки");
// W(-1);
// FROM(HEAP[22],HEAP[21],0);
 FROM(0,0,0);
 XFrom=XCURR;
 YFrom=YCURR;
 L456:print("Ширина листа[0]> ");  /* печатать на нижней ком строке */
 W144:=0;
 read(W144);                   /* ввод числа типа float и занесение его в переменную W144 */
 print("Длина листа[0]> ");        /* печатать на нижней ком строке */
 W145:=0;
 read(W145);                   /* ввод числа типа float и занесение его в переменную W144 */
 //OPSKIP();
 M(5);
 GODEL(0,W144);
 GODEL(W145,0);
 GODEL(0,-W144);
 GODEL(-W145,0);
 M(6);
 //OPSKIP();
 OK:='Y';
 print("обход листа OK([Y]/N)>");
 read(OK);
 if (OK =='N')
 {
   N(-6);
   D(6);
   goto L456;
 }
// razmer();
 L6445: print("-Выберите две точки для увеличения MAG");
 MAG();
 OK:='Y';
 print("Увеличение веpно([Y]/N)>");
 W(-1);
 print("                         ");
 if (S_GETCH>31) OK=S_GETCH;
 if (OK=='N')
 {
   ERA(); CEN(); DRA(0);
   goto L6445;
 }
 R();
 DRA(0);
 N(999);
}
else
{
 /* PROGON(); */
  OK:='Y';
  print("Хотите прогнать ДО КОНЦА([Y]/N)>");                /* печатать на нижней ком строке               */
 W(-1);
 print("                                  ");
 if (S_GETCH>31) OK=S_GETCH;
  /* если ничего не ввели остается старое значение переменных */
  CUR();
  CEN();
  DRA(0);     /* сириусная команда центровки                   */
  if (OK!='N') /* проверка введенного символа на неравенство с буквой N */
  {
    N(9999);   /* сириусная команда прогонки последовательности */
  }
}
menu_1=8;
loop=1;
UNDON();
